1. Create the Header component
  - will consist of just an h2 imported inside App.js  

2. Balance Component
  - Create a seperate div, under the Header but inside the entire div... 
    - assigned container as className
  - Pass the Balance component inside div. 
  - Create the Balance Component and import inside App.js
  ** I DID NOT ADD IT AS A FUNCTIONAL COMPONENT TO SEE WHAT WILL HAPPEN **

3. The income-expense component

4. The Transaction
  - Will consist of two components: A TransactionList Component and an individual Transaction Component
  - to begin, start by creating the transaction list... (TransactionList.js)

5. Add New Transaction component
  - create a new component "AddTransaction"

THE GLOBAL STATE:
1. Create a new folder, 'context'
2. inside this folder, create a file called "GlobalState.js". (will hold the context)
  A)  import React { createContext, useReducer } from 'react';
  B)  inialize our state, the global state; the global state will be an object and any data that needs to be shared throughout the app will need to be inside here.
      - In this case, we will only need to transactions 
          -- we will later call ACTIONS such as Add transaction, Delete transaction, etc. 

      const initialState = {
        transactions: [
          { id: 1, text: 'Flower', amount: -20 },
          { id: 2, text: 'Salary', amount: 300 },
          { id: 3, text: 'Book', amount: -10 },
          { id: 4, text: 'Camera', amount: 150 }
          ]
        }

3. Create the global context that was imported (to share the context)
  - export const GlobalContext = createContext(initialState);

4. Create a PROVIDER Component
  - in order for the other components to have access to it, we need to have a provider. 
    - need to wrap the components in a PROVIDER
    - inside the provider, we will call on USEREDUCER because we need to call a reducer action and it will use this dispatch
    - Reducer will take the file where useReducer will be used in as well as the initial state
    - It will return a GlobalContext.Provider that will hold the children
      - {children} will consist of all the components wrapped around the provider
      - we also pass the provider a 'value' prop  and we assign it the transactions and where to locate them.

      export const GlobalProivder = ({ children }) => {
        const [state, dispatch] = useReducer(AppReducer, initialState);
        return(
          <GlobalContext.Provider value = {{transactions: state.transactions}}>
            {children}
          </GlobalContext.Provider>
        );
      }

5. Create the AppReducer that we referenced in the previos step. 
  - go ahead and import AppReducer in the GloablState component and then create the actual component. It's going 
    to have to have it imported anyway since I reference it inside the useReducer hook in previous step.

  - Create AppReducer
    - takes a switch that takes on a type which is like an id...
    The basic layout: 
  
    export default (state, dispatch) => {
      switch (action.type) {
        default:
        return state;
      }
    }


6. Inside App.js, I need to import the GlobalProvider
  - import { GlobalProvider } from '/components/AddTransaction'
  - wrap the Provider around the components

7. Pass the context via useContext
  - inside TransactionList, import GlobalContext and useContext
    - pass the context (const context = useContext(GlobalContext))
      - const context = useContext(GlobalContext);
      - console.log(context);

        const { transactions } = useContext(GlobalContext); 
        return (
          <>
            <h3>History</h3>
            <ul className="list">
              {transactions.map(transaction => (
                <li className="minus">
                  {transaction.text} <span>-$400</span><button className="delete-button">x</button>
                </li>
              ))}
            </ul>
          </>
        )
  
8. Create a seperate component for each Transaction